Sobre este documento
        Autoria de Locust.
Este documento visa compilar pseudocodigo para organizar a atividade da aula 1-1 de orientação a objetos. Dito isso, ao longo do documento, a ideia é descrever uma biblioteca para desenhar as figuras e linhas de funções providas. 


Arquivo 1: linha
        Comentários e notas:
O arquivo linha deve conter a classe linha e seus métodos. A parte que o usuário vai interagir provavelmente será o main. Para a existência de um seguimento de reta, precisamos apenas de seu início e fim. Demais operações
Pseudocódigo:
                Classe linha:
                        Construtor(self, inicio, fim): #ou seja, um def __init__ da vida.
                                #inicio e fim deve ser vetores 2d do tipo [x, y]
                                #essa padronização vai permitir usar um pouco de 
                                #algebra linear. Eu chamo de inicio e fim, mas
                                #A e B dariam na mesma, o seguimento não
                                #tem orientação.
                                Self.inicio = inicio
                                Self.fim = fim
                                Self.tam = sqrt()
                                
                        Atualizar(self, inicio, fim): #serve para alterar tamanho de linhas
                                Self.inicio = inicio
                                Self.fim = fim
                Se arquivo iniciado como main: # If __name__ == “__main__”
                        #aqui devem conter algumas funções teste. 
                        1. Crie uma rotina de teste de um objeto linha
                        2. Teste atualização de uma linha
                        3. Teste o print de informações como início e fim da linha


Arquivo 2: figura
        Comentários e notas:
                Uma figura vai ser tratada basicamente como uma coleção de linhas e ou curvas. A figura sempre será fechada e isso que a diferencia de uma curva. Se ela detectar uma forma não fechada, ela transforma numa forma fechada.
        Pseudocodigo:
                Classe figura:
                        Construtor():
                                
                        
                        
Arquivo 3: curva
        Comentários e Notas:
                Uma curva será uma coleção de pontos [x,y] ligados por linhas infinitesimais. Como não podemos desenhar infinitos pontos com poder de processamento finito em um tempo razoável, um bom plano é ter um um número especificado de precisão. Ou seja, podemos deixar a curva arbitrariamente lisa ou quadrada. A diferença entre uma curva e uma figura, basicamente, é que a curva gera suas linhas automaticamente a partir de uma função. Uma figura também deve forçar que suas linhas fechem a figura, então a figura só deve representar formas fechadas, todavia essa limitação ainda deve permitir uma funcionalidade bem abrangente. O único problema seria, no caso, que vamos gerar apenas curvas finitas aqui.
        Pseudocódigo:
                Classe curva:
                        Constructor(self, func, xinit, xfinal, precisão):
                                Self.gerador = func
                                Self.xi = xinit
                                Self.xf = xfinal
                                Self.prec = precisão
                                self.gerapontos(precisão)
                        gerapontos(self, n): #essa função demoraria bastante pra escrever pois ela 
                        #necessita de reconhecimento de string e essas coisas pra traduzir uma
                        #string numa função. Provavelmente seria mais fácil, inclusive, fazer isso
                        #por meio de manipulação de arquivo do que reconhecimento de string. 
                                0. Cria lista de números de xinit a xfinal com dx = (xfinal-xinit)/n, tal que lista = [xinit, xinit + 1.dx, xinit + 2.dx, … , xfinal - dx, xfinal]. A lista contém precisão + 1 membros.
                                1. Cria arquivo tempfunc.py
                                2. Importa biblioteca de matematica (numpy, etc.) (no tempfunc, vai ajudar o usuário a escrever funções. Se você não estiver a fim, vá em frente e crie sua própria biblioteca de matemática)
                                3. Escreve def simplefunction(x):
                                4. return *string*, onde string é a função provida pelo usuário como self.gerador
                                5. Importar tempfunc dentro da função gerapontos
                                6. Usar simplefunction para gerar lista de pares ordenados x e y e guardá-los no objeto como self.xlist e self.ylist. Serão passados como argumento de x para simplefunction os membros da lista do passo 0.
                                7. Executar função gera linha.
                        geralinha(self):
                                #essa função deve gerar uma lista de objetos linha para passar para o drawer. ***O DRAWER DEVE RECEBER APPPPPEEEENNNAASSSSS LINHAS E DESENHAR AAAPPPPPEEEENNANASANS LINHAS!!!!!@!!!!!!!!!!!***
                                #lembrar que as listas xlist e ylista devem ter tamanho precisão + 1.
                                Self.linhas = lista de tamanho self.prec
                                i = -1
                                Para todo para x,y em self.xlist, self,ylist:
                                        i += 1
                                        Inicio = [self.xlist[i], self,ylist[i]]
                                        fim = [self.xlist[i+1], self,ylist[i+1]]
                                        Self.linhas[i] = linha(inicio, fim) #isso aqui evita ter que fazer o append. Como já temos o numero da precisão em self.prec, não tem necessidade de fazer o append! A razão de evitar isso é que:
                                         #1. Não temos certeza se a linguagem que estariamos programando tem essa função por padrão;
                                        #2. Sabe-se que a função append tende a ser bem computacionalmente intensiva!
                                        
                                        
Arquivo 4: drawer
        Comentários e notas:
                Drawer vai lidar com printar os resultados das operações até o momento. Eu quero que ele tenha uma lista de coisas que tem que desenhar e ele vai pintar cada um dos pixels necessários. Isso vai depender bastante da coisa das linhas, então se figuras são coleções de linha, ele vai ter que lidar com isso. Eu tenho medo, todavia, que para algumas funções, o drawer, ao invés de desenhar uma curva correta, faça um zig-zag. Isso pode indicar menor precisão que o necessário para visualizar a função, todavia!
                A ideia é que o programa desenhe um grid integer e desenhe linha por linha do programa. 
                Obs1: outra forma de facilitar desenhar as linhas seria passando uma lista dos objetos a serem desenhados para o objeto drawer. Aí caberia ao drawer discernir os objetos e desenhá-los posteriormente.
                Obs2: o programa deve obter os pontos e, como temos pixels discretos, é necessário que o programa tenha as equações de cada reta a ser desenhada para obter os pontos baseados nas precisões adequadas e colorir os pixels corretos. Felizmente, ao menos, não estamos escrevendo código para um display de fato!
                Obs3: lembrar de, na implementação, fazer questão de fazer os truncamentos para transformar floats em ints, ou teremos problemas para mostrar o gráfico. Funcionalidades avançadas incluem construir a opção de mudar a escala do gráfico.
        Pseudocódigo:
                DEFINA CONSTANTE RESX = 200 #constantes de resolução. Podem ser alteradas, posteriormente. 
                DEFINA CONSTANTE RESY = 200
                Class drawer:
                        Constructor(self, lista): #coleta lista de linhas e passa para o programa
                                Self.lines = lista #lista deve conter todas as linhas do drawer
                                Self.grid = [[RESX][RESY]] #sempre um quadrado, por que sim.
                                Self.gridmaker()
                                self. gridliner()
                        gridmaker(self): #constroi planos x,y no grid
                        1. Construa uma escala indo de linha por linha e inserindo os caracteres nos espaços do grid. Deve-se imaginar, todavia, que o computador vai deixar as primeiras linhas do print. 
#Para fins de interação, recomenda-se construir linha por 
#linha e não coluna por coluna.                                #Como não vamos construir bibliotecas gráficas estou 
#imaginando que tenho acesso apenas à caracteres
                                #ascii.
                        2. 
                        gridliner(self):
                                1. Constroi função de primeiro grau que gera as linhas para cada par início-fim por meio do método y-yo =m(x-xo).
                                2. Cria lista maior que contém todos os pontos que devem ser pintados para cada intervalo. #A precisão é arbitrária, mas é importante ter o suficiente para 
#não deixar pixels não pintados na tela do usuário.
                        exec(self): #Isso aqui desenha as linhas. Todas elas.
                                1. Printa linha por linha do self.grid.
1.1. Itera pelas linhas self.grid[i] e constroi strings a partir delas.
1.2. Printa cada linha sequencialmente.
                 #obs - linhas devem
                        update(self, lista): #substitui linhas.
                                Self.lines = lista


Arquivo 5: Main
        Comentários e notas:
                Esse arquivo, como não descreve nenhuma classe, é moderadamente opcional. Isso aqui seria a techdemo, onde mostramos pro usuário que o programa de fato desenha as linhas.
        Pseudocódigo:
                Função main:
1. Obtenha do usuário a escolha de quantas linhas desenhar. Crie objetos linha. 
2. Componha uma lista de linhas para cada linha obtida.
3. Passe a lista de linhas para um objeto drawer.
4. drawer.gridmaker(); drawer,gridliner(); drawer.exec().
5. Se desenhado corretamente, teremos uma série de pontinhos na tela do usuário que se assemelha bastante a um gráfico das linhas que ele pediu para desenhar.